name: Delete DigitalOcean Droplets by Tag (Scheduled)

on:
  schedule:
    - cron: '0 9 * * *' # Runs every day at 9 AM UTC (7 PM Brisbane time)
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'The tag name to filter droplets by'
        required: true
        type: string


jobs:
  dry_run_delete_droplets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code (if needed)
        uses: actions/checkout@v4

      - name: Set up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Get droplet IDs and names with the specified tag (Dry Run)
        id: get_droplets_dry_run
        run: |
          DROPS=$(doctl compute droplet list --tag-name "${{ github.event.inputs.tag_name }}" --format json)
          if [[ -n "$DROPS" ]]; then
            echo "::group::Droplets to be deleted (Dry Run):"
            for droplet in $(echo "$DROPS"); do
              id=$(echo "$droplet" | jq -r '.id')
              name=$(echo "$droplet" | jq -r '.name')
              echo "Droplet ID: $id, Name: $name"
            done
            echo "::endgroup::"
          else
            echo "No droplets found with tag: ${{ github.event.inputs.tag_name }}"
          fi
      - name: Delete droplets Dryrun
        if: steps.get_droplets.outputs.droplet_ids != ''
        run: |
          DROPLET_IDS=$(echo "${{ steps.get_droplets.outputs.droplet_ids }}" | sed 's/,$//')
          echo "Deleting droplets with IDs: $DROPLET_IDS (DRYRUN)"
          for droplet_id in $(echo "$DROPLET_IDS" | tr ',' ' '); do
            echo 'Dry run deleting with #compute_droplet_delete_--force_$droplet_id'
          done

      - name: Print completion message Dryrun
        if: steps.get_droplets.outputs.droplet_ids != ''
        run: echo "Droplets with tag '${{ github.event.inputs.tag_name }}' have been deleted (DRYRUN)."
  

  delete_droplets:
    runs-on: ubuntu-latest
    needs: dry_run_delete_droplets # add a dependency, so delete only runs if dry run succeeded.

    steps:
      - name: Checkout code (if needed)
        uses: actions/checkout@v4

      - name: Set up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Get droplet IDs with the specified tag
        id: get_droplets
        run: |
          DROPS=$(doctl compute droplet list --tag-name "${{ github.event.inputs.tag_name }}" --format json)
          if [[ -n "$DROPS" ]]; then
            echo "::set-output name=droplet_ids::$(echo "$DROPS" | jq -r '.[].id' | tr '\n' ',')"
          else
            echo "No droplets found with tag: ${{ github.event.inputs.tag_name }}"
            exit 0 # exit gracefully if no droplets are found.
          fi

      - name: Delete droplets
        if: steps.get_droplets.outputs.droplet_ids != ''
        run: |
          DROPLET_IDS=$(echo "${{ steps.get_droplets.outputs.droplet_ids }}" | sed 's/,$//')
          echo "Deleting droplets with IDs: $DROPLET_IDS"
          for droplet_id in $(echo "$DROPLET_IDS" | tr ',' ' '); do
            doctl compute droplet delete --force $droplet_id
          done

      - name: Print completion message
        if: steps.get_droplets.outputs.droplet_ids != ''
        run: echo "Droplets with tag '${{ github.event.inputs.tag_name }}' have been deleted."
